import { useEffect, useState } from 'react'\n\nexport default function Booking({ supabase }) {\n  const [professionals, setProfessionals] = useState([])\n  const [services, setServices] = useState([])\n  const [selectedProfessional, setSelectedProfessional] = useState('')\n  const [selectedService, setSelectedService] = useState('')\n  const [date, setDate] = useState('')\n  const [time, setTime] = useState('10:00')\n  const [clientName, setClientName] = useState('')\n  const [clientContact, setClientContact] = useState('')\n  const [message, setMessage] = useState('')\n\n  useEffect(() => { fetchProfessionals(); }, [])\n\n  async function fetchProfessionals() {\n    const { data, error } = await supabase.from('professionals').select('*')\n    if (!error) setProfessionals(data || [])\n  }\n\n  async function fetchServices(profId) {\n    const { data, error } = await supabase.from('services').select('*').eq('professional_id', profId)\n    if (!error) setServices(data || [])\n  }\n\n  async function handleProfessionalChange(e) {\n    const id = e.target.value\n    setSelectedProfessional(id)\n    setSelectedService('')\n    fetchServices(id)\n  }\n\n  function generateTimeSlots() {\n    const slots = []\n    for(let h=10; h<18; h++) {\n      slots.push(`${String(h).padStart(2,'0')}:00`)\n    }\n    return slots\n  }\n\n  async function handleBook(e) {\n    e?.preventDefault()\n    if(!selectedProfessional || !selectedService || !date || !clientName || !clientContact) {\n      setMessage('Completa todos los campos')\n      return\n    }\n    // create booking with status PENDIENTE\n    const timeISO = new Date(`${date}T${time}:00`).toISOString()\n    const { data, error } = await supabase.from('bookings').insert([{\n      professional_id: selectedProfessional,\n      client_name: clientName,\n      client_contact: clientContact,\n      service_id: selectedService,\n      time: timeISO,\n      status: 'PENDIENTE'\n    }])\n    if (error) setMessage('Error al crear reserva: '+error.message)\n    else {\n      setMessage('Reserva creada. Se enviará confirmación en hasta 1 hora.')\n      // clear\n      setClientName(''); setClientContact('')\n    }\n  }\n\n  return (\n    <div>\n      <h2>Reservar cita</h2>\n      <form onSubmit={handleBook} style={{ display:'grid', gap:8, maxWidth:520 }}>\n        <label>Profesional</label>\n        <select value={selectedProfessional} onChange={handleProfessionalChange}>\n          <option value=''>-- Selecciona --</option>\n          {professionals.map(p=> <option key={p.id} value={p.id}>{p.name}</option>)}\n        </select>\n\n        <label>Servicio</label>\n        <select value={selectedService} onChange={e=> setSelectedService(e.target.value)}>\n          <option value=''>-- Selecciona --</option>\n          {services.map(s=> <option key={s.id} value={s.id}>{s.name} — ${s.price} CLP</option>)}\n        </select>\n\n        <label>Fecha</label>\n        <input type="date" value={date} onChange={e=> setDate(e.target.value)} min={new Date().toISOString().slice(0,10)} />\n\n        <label>Hora (bloque 1h, atención 45 min)</label>\n        <select value={time} onChange={e=> setTime(e.target.value)}>\n          {generateTimeSlots().map(t=> <option key={t} value={t}>{t}</option>)}\n        </select>\n\n        <input placeholder="Nombre" value={clientName} onChange={e=> setClientName(e.target.value)} />\n        <input placeholder="Teléfono o email" value={clientContact} onChange={e=> setClientContact(e.target.value)} />\n\n        <div style={{ display:'flex', gap:8 }}>\n          <button type="submit">Reservar — Crear</button>\n        </div>\n      </form>\n      {message && <div className="notice">{message}</div>}\n      <div style={{ marginTop:12, fontSize:13, color:'#555' }}>\n        Nota: La atención dura 45 minutos, pero se bloquea 1 hora para limpieza.\n      </div>\n    </div>\n  )\n}\n